{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPassportNumber;\n/**\n * Reference:\n * https://en.wikipedia.org/ -- Wikipedia\n * https://docs.microsoft.com/en-us/microsoft-365/compliance/eu-passport-number -- EU Passport Number\n * https://countrycode.org/ -- Country Codes\n */\n\nvar passportRegexByCountryCode = {\n  AM: /^[A-Z]{2}\\d{7}$/,\n  // ARMENIA\n  AR: /^[A-Z]{3}\\d{6}$/,\n  // ARGENTINA\n  AT: /^[A-Z]\\d{7}$/,\n  // AUSTRIA\n  AU: /^[A-Z]\\d{7}$/,\n  // AUSTRALIA\n  BE: /^[A-Z]{2}\\d{6}$/,\n  // BELGIUM\n  BG: /^\\d{9}$/,\n  // BULGARIA\n  CA: /^[A-Z]{2}\\d{6}$/,\n  // CANADA\n  CH: /^[A-Z]\\d{7}$/,\n  // SWITZERLAND\n  CN: /^[GE]\\d{8}$/,\n  // CHINA [G=Ordinary, E=Electronic] followed by 8-digits\n  CY: /^[A-Z](\\d{6}|\\d{8})$/,\n  // CYPRUS\n  CZ: /^\\d{8}$/,\n  // CZECH REPUBLIC\n  DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,\n  // GERMANY\n  DK: /^\\d{9}$/,\n  // DENMARK\n  DZ: /^\\d{9}$/,\n  // ALGERIA\n  EE: /^([A-Z]\\d{7}|[A-Z]{2}\\d{7})$/,\n  // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits\n  ES: /^[A-Z0-9]{2}([A-Z0-9]?)\\d{6}$/,\n  // SPAIN\n  FI: /^[A-Z]{2}\\d{7}$/,\n  // FINLAND\n  FR: /^\\d{2}[A-Z]{2}\\d{5}$/,\n  // FRANCE\n  GB: /^\\d{9}$/,\n  // UNITED KINGDOM\n  GR: /^[A-Z]{2}\\d{7}$/,\n  // GREECE\n  HR: /^\\d{9}$/,\n  // CROATIA\n  HU: /^[A-Z]{2}(\\d{6}|\\d{7})$/,\n  // HUNGARY\n  IE: /^[A-Z0-9]{2}\\d{7}$/,\n  // IRELAND\n  IS: /^(A)\\d{7}$/,\n  // ICELAND\n  IT: /^[A-Z0-9]{2}\\d{7}$/,\n  // ITALY\n  JP: /^[A-Z]{2}\\d{7}$/,\n  // JAPAN\n  KR: /^[MS]\\d{8}$/,\n  // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]\n  LT: /^[A-Z0-9]{8}$/,\n  // LITHUANIA\n  LU: /^[A-Z0-9]{8}$/,\n  // LUXEMBURG\n  LV: /^[A-Z0-9]{2}\\d{7}$/,\n  // LATVIA\n  MT: /^\\d{7}$/,\n  // MALTA\n  NL: /^[A-Z]{2}[A-Z0-9]{6}\\d$/,\n  // NETHERLANDS\n  PO: /^[A-Z]{2}\\d{7}$/,\n  // POLAND\n  PT: /^[A-Z]\\d{6}$/,\n  // PORTUGAL\n  RO: /^\\d{8,9}$/,\n  // ROMANIA\n  SE: /^\\d{8}$/,\n  // SWEDEN\n  SL: /^(P)[A-Z]\\d{7}$/,\n  // SLOVANIA\n  SK: /^[0-9A-Z]\\d{7}$/,\n  // SLOVAKIA\n  TR: /^[A-Z]\\d{8}$/,\n  // TURKEY\n  UA: /^[A-Z]{2}\\d{6}$/,\n  // UKRAINE\n  US: /^\\d{9}$/ // UNITED STATES\n\n};\n/**\n * Check if str is a valid passport number\n * relative to provided ISO Country Code.\n *\n * @param {string} str\n * @param {string} countryCode\n * @return {boolean}\n */\n\nfunction isPassportNumber(str, countryCode) {\n  /** Remove All Whitespaces, Convert to UPPERCASE */\n  var normalizedStr = str.replace(/\\s/g, '').toUpperCase();\n  return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/Users/MarcosCanchola/Desktop/web_projects/Mac_Todo/node_modules/validator/lib/isPassportNumber.js"],"names":["Object","defineProperty","exports","value","default","isPassportNumber","passportRegexByCountryCode","AM","AR","AT","AU","BE","BG","CA","CH","CN","CY","CZ","DE","DK","DZ","EE","ES","FI","FR","GB","GR","HR","HU","IE","IS","IT","JP","KR","LT","LU","LV","MT","NL","PO","PT","RO","SE","SL","SK","TR","UA","US","str","countryCode","normalizedStr","replace","toUpperCase","test","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPassportNumber;\n\n/**\n * Reference:\n * https://en.wikipedia.org/ -- Wikipedia\n * https://docs.microsoft.com/en-us/microsoft-365/compliance/eu-passport-number -- EU Passport Number\n * https://countrycode.org/ -- Country Codes\n */\nvar passportRegexByCountryCode = {\n  AM: /^[A-Z]{2}\\d{7}$/,\n  // ARMENIA\n  AR: /^[A-Z]{3}\\d{6}$/,\n  // ARGENTINA\n  AT: /^[A-Z]\\d{7}$/,\n  // AUSTRIA\n  AU: /^[A-Z]\\d{7}$/,\n  // AUSTRALIA\n  BE: /^[A-Z]{2}\\d{6}$/,\n  // BELGIUM\n  BG: /^\\d{9}$/,\n  // BULGARIA\n  CA: /^[A-Z]{2}\\d{6}$/,\n  // CANADA\n  CH: /^[A-Z]\\d{7}$/,\n  // SWITZERLAND\n  CN: /^[GE]\\d{8}$/,\n  // CHINA [G=Ordinary, E=Electronic] followed by 8-digits\n  CY: /^[A-Z](\\d{6}|\\d{8})$/,\n  // CYPRUS\n  CZ: /^\\d{8}$/,\n  // CZECH REPUBLIC\n  DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,\n  // GERMANY\n  DK: /^\\d{9}$/,\n  // DENMARK\n  DZ: /^\\d{9}$/,\n  // ALGERIA\n  EE: /^([A-Z]\\d{7}|[A-Z]{2}\\d{7})$/,\n  // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits\n  ES: /^[A-Z0-9]{2}([A-Z0-9]?)\\d{6}$/,\n  // SPAIN\n  FI: /^[A-Z]{2}\\d{7}$/,\n  // FINLAND\n  FR: /^\\d{2}[A-Z]{2}\\d{5}$/,\n  // FRANCE\n  GB: /^\\d{9}$/,\n  // UNITED KINGDOM\n  GR: /^[A-Z]{2}\\d{7}$/,\n  // GREECE\n  HR: /^\\d{9}$/,\n  // CROATIA\n  HU: /^[A-Z]{2}(\\d{6}|\\d{7})$/,\n  // HUNGARY\n  IE: /^[A-Z0-9]{2}\\d{7}$/,\n  // IRELAND\n  IS: /^(A)\\d{7}$/,\n  // ICELAND\n  IT: /^[A-Z0-9]{2}\\d{7}$/,\n  // ITALY\n  JP: /^[A-Z]{2}\\d{7}$/,\n  // JAPAN\n  KR: /^[MS]\\d{8}$/,\n  // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]\n  LT: /^[A-Z0-9]{8}$/,\n  // LITHUANIA\n  LU: /^[A-Z0-9]{8}$/,\n  // LUXEMBURG\n  LV: /^[A-Z0-9]{2}\\d{7}$/,\n  // LATVIA\n  MT: /^\\d{7}$/,\n  // MALTA\n  NL: /^[A-Z]{2}[A-Z0-9]{6}\\d$/,\n  // NETHERLANDS\n  PO: /^[A-Z]{2}\\d{7}$/,\n  // POLAND\n  PT: /^[A-Z]\\d{6}$/,\n  // PORTUGAL\n  RO: /^\\d{8,9}$/,\n  // ROMANIA\n  SE: /^\\d{8}$/,\n  // SWEDEN\n  SL: /^(P)[A-Z]\\d{7}$/,\n  // SLOVANIA\n  SK: /^[0-9A-Z]\\d{7}$/,\n  // SLOVAKIA\n  TR: /^[A-Z]\\d{8}$/,\n  // TURKEY\n  UA: /^[A-Z]{2}\\d{6}$/,\n  // UKRAINE\n  US: /^\\d{9}$/ // UNITED STATES\n\n};\n/**\n * Check if str is a valid passport number\n * relative to provided ISO Country Code.\n *\n * @param {string} str\n * @param {string} countryCode\n * @return {boolean}\n */\n\nfunction isPassportNumber(str, countryCode) {\n  /** Remove All Whitespaces, Convert to UPPERCASE */\n  var normalizedStr = str.replace(/\\s/g, '').toUpperCase();\n  return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}