{"ast":null,"code":"var _jsxFileName = \"/Users/MarcosCanchola/Desktop/web_projects/todo/src/components/Todo.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Button, Checkbox, Icon, Input, Loader } from 'semantic-ui-react';\nimport validator from 'validator';\nimport moment from 'moment';\nimport './Todo.css';\nconst date = moment().format(\"MMMM Do YYYY\");\n\nfunction TodoEngine() {\n  // Initialize our state variables\n  const [todo, setTodo] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [realTime, setTime] = useState(time);\n  const [todos, getTodos] = useState([]); // Save todo item\n\n  const saveTodo = e => {\n    e.preventDefault(); // Validate to see if todo isnt an empty task\n\n    if (validator.isAlphanumeric(todo)) {\n      const savedItems = JSON.parse(window.localStorage.getItem('todo'));\n      let items = [];\n\n      if (savedItems === null) {\n        items = [{\n          id: Math.floor(Math.random(99999) * 232234),\n          todo,\n          completed: 'false',\n          date: date,\n          time: time\n        }];\n      } else {\n        items = [{\n          id: Math.floor(Math.random(99999) * 2342342),\n          todo,\n          completed: 'false',\n          date: date,\n          time: time\n        }, ...savedItems];\n      } // Save items\n\n\n      window.localStorage.setItem('todo', JSON.stringify(items));\n      setTodo(\"\");\n    } else {\n      alert('Insert a task');\n    }\n  };\n\n  function loadItems() {\n    setLoading(true);\n    const items = JSON.parse(window.localStorage.getItem('todo'));\n    getTodos(items);\n    setLoading(false);\n    setInterval(() => setRealTime(), 1000);\n  }\n\n  function clearItems() {\n    window.localStorage.removeItem('todo');\n    getTodos([]);\n  }\n\n  function removeTodo(todo) {\n    const items = todos.filter(item => item.id !== todo.id);\n    window.localStorage.setItem('todo', JSON.stringify(items));\n    loadItems(todos);\n  }\n\n  function taskCompleted(todo) {\n    const items = todos.map((item, idx, arr) => {\n      if (item.id === todo.id) {\n        item.completed = 'true';\n      }\n\n      return item;\n    });\n    window.localStorage.setItem('todo', JSON.stringify(items));\n    loadItems(todos);\n  }\n\n  function setRealTime() {\n    const time = moment().format(\"h:mm:ss a\");\n    console.log('Running time...', time);\n    setTime(time);\n  } //useEffect will load only once when component is mounted\n\n\n  useEffect(() => {\n    loadItems(todos);\n  }, [todo]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Loader, {\n    active: true,\n    inline: \"centered\",\n    style: {\n      marginTop: '5%;'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      margin: '0%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, date), /*#__PURE__*/React.createElement(\"h4\", {\n    style: {\n      margin: '0%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, time)), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: todo,\n    onChange: e => setTodo(e.target.value),\n    placeholder: \"Please insert a task...\",\n    style: {\n      width: '70%',\n      marginBottom: '1%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    inverted: true,\n    color: \"blue\",\n    onClick: e => saveTodo(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, \"Save\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    inverted: true,\n    color: \"red\",\n    onClick: () => clearItems(),\n    style: {\n      float: 'right',\n      marginBottom: '-3%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }, \"Todo List\"), todos === null || todos.length === 0 ? /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 70\n    }\n  }, \"There are currently no items at the moment.\") : todos.map((item, idx) => /*#__PURE__*/React.createElement(\"li\", {\n    key: idx,\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    onClick: e => taskCompleted(item),\n    checked: item.completed === 'true' ? 'true' : '',\n    toggle: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 45\n    }\n  }, \"Completed\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 41\n    }\n  }, item.todo), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 45\n    }\n  }, \"Completed: \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 81\n    }\n  }, \" \", item.completed, \" \"), \" \")), /*#__PURE__*/React.createElement(Icon, {\n    name: \"trash\",\n    onClick: e => removeTodo(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 41\n    }\n  })))))));\n}\n\nexport default TodoEngine;","map":{"version":3,"sources":["/Users/MarcosCanchola/Desktop/web_projects/todo/src/components/Todo.js"],"names":["React","useState","useEffect","Button","Checkbox","Icon","Input","Loader","validator","moment","date","format","TodoEngine","todo","setTodo","loading","setLoading","realTime","setTime","time","todos","getTodos","saveTodo","e","preventDefault","isAlphanumeric","savedItems","JSON","parse","window","localStorage","getItem","items","id","Math","floor","random","completed","setItem","stringify","alert","loadItems","setInterval","setRealTime","clearItems","removeItem","removeTodo","filter","item","taskCompleted","map","idx","arr","console","log","marginTop","margin","target","value","width","marginBottom","float","length"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {Button, Checkbox, Icon, Input, Loader} from 'semantic-ui-react';\nimport validator from 'validator';\nimport moment from 'moment'\nimport './Todo.css';\n\nconst date = moment().format(\"MMMM Do YYYY\");\n\nfunction TodoEngine(){\n    // Initialize our state variables\n    const [todo, setTodo] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [realTime,setTime] = useState(time);\n    const [todos, getTodos] = useState([]);\n\n    // Save todo item\n    const saveTodo = (e)=>{\n        e.preventDefault();\n        \n        // Validate to see if todo isnt an empty task\n        if(validator.isAlphanumeric(todo)){\n            const savedItems = JSON.parse(window.localStorage.getItem('todo'));\n            let items=[];\n            \n            if(savedItems === null){\n                items = [\n                    {\n                        id:Math.floor(Math.random(99999)*232234),\n                        todo,\n                        completed:'false',\n                        date:date,\n                        time:time\n                    }];\n     \n            }else{\n                items = [\n                        {\n                            id:Math.floor(Math.random(99999)*2342342),\n                            todo,\n                            completed:'false',\n                            date:date,\n                            time:time\n                        },\n                        ...savedItems,\n                    ];      \n            }\n            // Save items\n            window.localStorage.setItem('todo', JSON.stringify(items));   \n            setTodo(\"\");  \n\n        } \n        else{\n            alert('Insert a task');\n        }\n    }\n\n    function loadItems(){\n        setLoading(true);\n        const items = JSON.parse(window.localStorage.getItem('todo'));\n        getTodos(items);\n        setLoading(false);\n        setInterval(()=>setRealTime(),1000);\n    }\n    \n    function clearItems(){\n        window.localStorage.removeItem('todo');\n        getTodos([]);\n    }\n\n    function removeTodo(todo){\n        const items = todos.filter(item => item.id !== todo.id );\n        window.localStorage.setItem('todo', JSON.stringify(items));\n        loadItems(todos)\n\n    }\n\n    function taskCompleted(todo){\n        const items = todos.map((item,idx,arr) => {\n            if(item.id === todo.id){\n                item.completed = 'true';\n            }\n            return item\n        });\n        window.localStorage.setItem('todo', JSON.stringify(items));\n        loadItems(todos)  \n    }\n\n    function setRealTime(){\n        const time = moment().format(\"h:mm:ss a\");\n\n        console.log('Running time...',time)\n        setTime(time);\n    }\n\n\n    //useEffect will load only once when component is mounted\n    useEffect(()=>{\n        loadItems(todos);\n    },[todo])\n    \n    return (\n        <div>\n        { (loading) ? <Loader active inline='centered' style={{marginTop:'5%;'}} /> :\n            <div>\n                <div >\n                    <h3 style={{margin:'0%'}}>{date}</h3>\n                    <h4 style={{margin:'0%'}}>{time}</h4>\n                </div>\n                <form>                \n                    <Input \n                        value={todo}\n                        onChange={(e)=> setTodo(e.target.value)}\n                        placeholder=\"Please insert a task...\"\n                        style={{width:'70%',marginBottom:'1%'}}\n                    />\n                    <Button \n                        inverted color=\"blue\" \n                        onClick={e => saveTodo(e)}>Save</Button>\n                </form>   \n                <div className=\"listContainer\">\n                    <Button inverted color=\"red\" onClick={()=>clearItems()} style={{float:'right',marginBottom:'-3%'}}>Clear</Button>\n                    <ul>\n                    <h3>Todo List</h3>\n\n                        {\n                            (todos === null || todos.length === 0) ? <h5>There are currently no items at the moment.</h5>  : \n                                todos.map((item,idx)=>\n                                    <li key={idx} className=\"list\">\n                                        <div>\n                                            <Checkbox \n                                                onClick={(e)=> taskCompleted(item)} \n                                                checked={ (item.completed === 'true' ) ? 'true': '' }\n                                                toggle\n                                                />    \n                                            <p>Completed</p>                                        \n                                        </div>\n\n                                        <p>{item.todo}</p>  \n                                        <div>\n                                            <p className=\"completed\">Completed: <b> {item.completed} </b> </p>\n                                            {/* <p>Date:{item.date}</p>                                           \n                                            <p>Time:{item.time}</p> */}\n                                        </div>\n                                        <Icon name='trash' onClick={(e) => removeTodo(item)}/>    \n                                    </li>\n                                ) \n                        }\n                    </ul>\n                </div>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default TodoEngine;"]},"metadata":{},"sourceType":"module"}